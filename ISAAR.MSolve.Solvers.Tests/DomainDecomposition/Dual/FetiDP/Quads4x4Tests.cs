using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using ISAAR.MSolve.Discretization.Interfaces;
using ISAAR.MSolve.FEM.Entities;
using ISAAR.MSolve.LinearAlgebra.Matrices;
using ISAAR.MSolve.LinearAlgebra.Triangulation;
using ISAAR.MSolve.LinearAlgebra.Vectors;
using ISAAR.MSolve.Solvers.DomainDecomposition.Dual.FetiDP;
using Xunit;

namespace ISAAR.MSolve.Solvers.Tests.DomainDecomposition.Dual.FetiDP
{
    public static class Quads4x4Tests
    {
        private static Dictionary<int, Matrix> MatricesKrr
        {
            get
            {
                var Krr = new Dictionary<int, Matrix>();
                Krr[0] = Matrix.CreateFromArray(new double[,]
                {
                { 0.9890109890, 0, 0.10989010990, 0, -0.24725274730, -0.17857142860, 0, 0 },
                { 0, 0.9890109890,  0, -0.60439560440, -0.17857142860, -0.24725274730, 0, 0 },
                { 0.10989010990, 0, 1.9780219780,  0, -0.60439560440, 0, 0.10989010990, 0 },
                { 0, -0.60439560440, 0, 1.9780219780,  0, 0.10989010990, 0, -0.60439560440 },
                { -0.24725274730,  -0.17857142860, -0.60439560440, 0, 0.9890109890,  0, -0.24725274730, 0.17857142860 },
                { -0.17857142860,  -0.24725274730, 0, 0.10989010990, 0, 0.9890109890,  0.17857142860, -0.24725274730 },
                { 0, 0, 0.10989010990, 0, -0.24725274730, 0.17857142860, 0.9890109890,  0 },
                { 0, 0, 0, -0.60439560440, 0.17857142860, -0.24725274730, 0, 0.9890109890 }
                });

                Krr[1] = Matrix.CreateFromArray(new double[,]
                {
                { 0.9890109890,    0,  -0.3021978022, -0.01373626370,-0.2472527473, 0.1785714286,  0.1098901099,  0,  -0.2472527473, -0.1785714286, 0,  0      },
                { 0, 0.9890109890,  0.01373626370, 0.05494505490, 0.1785714286,  -0.2472527473, 0,  -0.6043956044, -0.1785714286, -0.2472527473, 0,  0         },
                { -0.3021978022,   0.01373626370, 0.4945054945,  -0.1785714286, 0,  0,  -0.2472527473, 0.1785714286,  0.05494505490, -0.01373626370,    0,  0  },
                { -0.01373626370,  0.05494505490, -0.1785714286, 0.4945054945,  0,  0,  0.1785714286,  -0.2472527473, 0.01373626370, -0.3021978022, 0,  0      },
                { -0.2472527473,   0.1785714286,  0,  0,  0.9890109890,  0,  -0.6043956044, 0,  0,  0,  -0.2472527473, -0.1785714286                           },
                { 0.1785714286,    -0.2472527473, 0,  0,  0,  0.9890109890,  0,  0.1098901099,  0,  0,  -0.1785714286, -0.2472527473                           },
                { 0.1098901099,    0,  -0.2472527473, 0.1785714286,  -0.6043956044, 0,  1.978021978,   0,  -0.6043956044, 0,  0.1098901099,  0                 },
                { 0, -0.6043956044, 0.1785714286,  -0.2472527473, 0,  0.1098901099,  0,  1.978021978,   0,  0.1098901099,  0,  -0.6043956044                   },
                { -0.2472527473,   -0.1785714286, 0.05494505490, 0.01373626370, 0,  0,  -0.6043956044, 0,  0.9890109890,  0,  -0.2472527473, 0.1785714286      },
                { -0.1785714286,   -0.2472527473, -0.01373626370,    -0.3021978022, 0,  0,  0,  0.1098901099,  0,  0.9890109890,  0.1785714286,  -0.2472527473 },
                { 0,    0,  0,  0,  -0.2472527473, -0.1785714286, 0.1098901099,  0,  -0.2472527473, 0.1785714286,  0.9890109890,  0                            },
                { 0,    0,  0,  0,  -0.1785714286, -0.2472527473, 0,  -0.6043956044, 0.1785714286,  -0.2472527473, 0,  0.9890109890                            }
                });

                Krr[2] = Matrix.CreateFromArray(new double[,]
                {
                { 0.9890109890, 0, 0.10989010990, 0, -0.24725274730, -0.17857142860, 0, 0 },
                { 0, 0.9890109890, 0, -0.60439560440, -0.17857142860, -0.24725274730, 0, 0 },
                { 0.10989010990, 0, 1.9780219780, 0, -0.60439560440, 0, 0.10989010990, 0 },
                { 0, -0.60439560440, 0, 1.9780219780, 0, 0.10989010990, 0, -0.60439560440 },
                { -0.24725274730, -0.17857142860, -0.60439560440, 0, 0.9890109890, 0, -0.24725274730, 0.17857142860 },
                { -0.17857142860, -0.24725274730, 0, 0.10989010990, 0, 0.9890109890, 0.17857142860, -0.24725274730 },
                { 0, 0, 0.10989010990, 0, -0.24725274730, 0.17857142860, 0.9890109890, 0 },
                { 0, 0, 0, -0.60439560440, 0.17857142860, -0.24725274730, 0, 0.9890109890 }
                });

                Krr[3] = Matrix.CreateFromArray(new double[,]
                {
                { 0.9890109890, 0, -0.24725274730, 0.17857142860, 0.10989010990, 0, -0.24725274730, -0.17857142860, 0, 0, 0, 0                           },
                { 0, 0.9890109890, 0.17857142860, -0.24725274730, 0, -0.60439560440, -0.17857142860, -0.24725274730, 0, 0, 0, 0                          },
                { -0.24725274730, 0.17857142860, 0.9890109890, 0, -0.60439560440, 0, 0, 0, -0.24725274730, -0.17857142860, 0, 0                          },
                { 0.17857142860, -0.24725274730, 0, 0.9890109890, 0, 0.10989010990, 0, 0, -0.17857142860, -0.24725274730, 0, 0                           },
                { 0.10989010990, 0, -0.60439560440, 0, 1.9780219780, 0, -0.60439560440, 0, 0.10989010990, 0, -0.24725274730, -0.17857142860              },
                { 0, -0.60439560440, 0, 0.10989010990, 0, 1.9780219780, 0, 0.10989010990, 0, -0.60439560440, -0.17857142860, -0.24725274730              },
                { -0.24725274730, -0.17857142860, 0, 0, -0.60439560440, 0, 0.9890109890, 0, -0.24725274730, 0.17857142860, 0.05494505490, -0.01373626370 },
                { -0.17857142860, -0.24725274730, 0, 0, 0, 0.10989010990, 0, 0.9890109890, 0.17857142860, -0.24725274730, 0.01373626370, -0.30219780220  },
                { 0, 0, -0.24725274730, -0.17857142860, 0.10989010990, 0, -0.24725274730, 0.17857142860, 0.9890109890, 0, -0.30219780220, 0.01373626370  },
                { 0, 0, -0.17857142860, -0.24725274730, 0, -0.60439560440, 0.17857142860, -0.24725274730, 0, 0.9890109890, -0.01373626370, 0.05494505490 },
                { 0, 0, 0, 0, -0.24725274730, -0.17857142860, 0.05494505490, 0.01373626370, -0.30219780220, -0.01373626370, 0.49450549450, 0.17857142860 },
                { 0, 0, 0, 0, -0.17857142860, -0.24725274730, -0.01373626370, -0.30219780220, 0.01373626370, 0.05494505490, 0.17857142860, 0.49450549450 }
                });
                return Krr;
            }
        }

        private static Dictionary<int, Matrix> MatricesKrc
        {
            get
            {
                var Krc = new Dictionary<int, Matrix>();
                Krc[0] = Matrix.CreateFromArray(new double[,]
                {
                    {-0.30219780220, -0.01373626370, 0, 0                         },
                    {0.01373626370, 0.05494505490, 0, 0                           },
                    {-0.24725274730, 0.17857142860, -0.24725274730, -0.17857142860},
                    {0.17857142860, -0.24725274730, -0.17857142860, -0.24725274730},
                    {0.05494505490, 0.01373626370, 0.05494505490, -0.01373626370  },
                    {-0.01373626370, -0.30219780220, 0.01373626370, -0.30219780220},
                    {0, 0, -0.30219780220, 0.01373626370                          },
                    {0, 0, -0.01373626370, 0.05494505490                          }
                });

                Krc[1] = Matrix.CreateFromArray(new double[,]
                {
                    {-0.30219780220, 0.01373626370, 0, 0, 0, 0                                                     },
                    {-0.01373626370, 0.05494505490, 0, 0, 0, 0                                                     },
                    {0, 0, 0, 0, 0, 0                                                                              },
                    {0, 0, 0, 0, 0, 0                                                                              },
                    {0.05494505490, -0.01373626370, 0.05494505490, 0.01373626370, 0, 0                             },
                    {0.01373626370, -0.30219780220, -0.01373626370, -0.30219780220, 0, 0                           },
                    {-0.24725274730, -0.17857142860, -0.24725274730, 0.17857142860, -0.24725274730, -0.17857142860 },
                    {-0.17857142860, -0.24725274730, 0.17857142860, -0.24725274730, -0.17857142860, -0.24725274730 },
                    {0, 0, 0, 0, 0.05494505490, -0.01373626370                                                     },
                    {0, 0, 0, 0, 0.01373626370, -0.30219780220                                                     },
                    {0, 0, -0.30219780220, -0.01373626370, -0.30219780220, 0.01373626370                           },
                    {0, 0, 0.01373626370, 0.05494505490, -0.01373626370, 0.05494505490                             }
                });

                Krc[2] = Matrix.CreateFromArray(new double[,]
                {
                    {-0.30219780220, -0.01373626370, 0, 0                          },
                    {0.01373626370, 0.05494505490, 0, 0                            },
                    {-0.24725274730, 0.17857142860, -0.24725274730, -0.17857142860 },
                    {0.17857142860, -0.24725274730, -0.17857142860, -0.24725274730 },
                    {0.05494505490, 0.01373626370, 0.05494505490, -0.01373626370   },
                    {-0.01373626370, -0.30219780220, 0.01373626370, -0.30219780220 },
                    {0, 0, -0.30219780220, 0.01373626370                           },
                    {0, 0, -0.01373626370, 0.05494505490                           }
                });

                Krc[3] = Matrix.CreateFromArray(new double[,]
                {
                    {-0.30219780220, 0.01373626370, -0.30219780220, -0.01373626370, 0, 0                         },
                    {-0.01373626370, 0.05494505490, 0.01373626370, 0.05494505490, 0, 0                           },
                    {0.05494505490, -0.01373626370, 0, 0, 0.05494505490, 0.01373626370                           },
                    {0.01373626370, -0.30219780220, 0, 0, -0.01373626370, -0.30219780220                         },
                    {-0.24725274730, -0.17857142860, -0.24725274730, 0.17857142860, -0.24725274730, 0.17857142860},
                    {-0.17857142860, -0.24725274730, 0.17857142860, -0.24725274730, 0.17857142860, -0.24725274730},
                    {0, 0, 0.05494505490, 0.01373626370, 0, 0                                                    },
                    {0, 0, -0.01373626370, -0.30219780220, 0, 0                                                  },
                    {0, 0, 0, 0, -0.30219780220, -0.01373626370                                                  },
                    {0, 0, 0, 0, 0.01373626370, 0.05494505490                                                    },
                    {0, 0, 0, 0, 0, 0                                                                            },
                    {0, 0, 0, 0, 0, 0                                                                            }
                });
                return Krc;
            }
        }

        private static Dictionary<int, Vector> VectorsFr
        {
            get
            {
                var fr = new Dictionary<int, Vector>();
                fr[0] = Vector.CreateZero(8);
                fr[1] = Vector.CreateZero(12);
                fr[2] = Vector.CreateZero(8);
                fr[3] = Vector.CreateZero(12);
                fr[3][11] = 10;
                return fr;
            }
        }

        [Fact]
        public static void TestDisconnectedDisplacements()
        {
            //TODO: Perhaps use the Br, Bc from the class that tests them instead of the solver.

            Model model = MappingMatricesTests.CreateModel();
            Dictionary<int, INode[]> cornerNodes = MappingMatricesTests.DefineCornerNodes(model);
            var solver = new FetiDPSolver.Builder(cornerNodes).BuildSolver(model);
            model.ConnectDataStructures();
            solver.OrderDofs(false);

            Dictionary<int, Matrix> Krr = MatricesKrr;
            var factorizedKrr = new Dictionary<int, CholeskyFull>();
            for (int i = 0; i < 4; ++i) factorizedKrr[i] = Krr[i].FactorCholesky(false);
            var fr = VectorsFr;

            Vector dr = solver.CalcDisconnectedDisplacements(factorizedKrr, fr);
            var expectedDr = Vector.CreateFromArray(new double[] 
            {
                0, 0, 0, 0, -3.375195492420367, -10.215251712309035, 0.418600986802971, -1.151753569240856
            });

            double tol = 1E-13;
            Assert.True(expectedDr.Equals(dr, tol));
        }

        [Fact]
        public static void TestFlexibilityMatrices()
        {
            // Setup the model and solver
            Model model = MappingMatricesTests.CreateModel();
            Dictionary<int, INode[]> cornerNodes = MappingMatricesTests.DefineCornerNodes(model);
            var solver = new FetiDPSolver.Builder(cornerNodes).BuildSolver(model);
            model.ConnectDataStructures();
            solver.OrderDofs(false);

            // Use the hardcoded intermediate matrices
            Dictionary<int, Matrix> Krc = MatricesKrc;
            Dictionary<int, Matrix> Krr = MatricesKrr;
            var factorizedKrr = new Dictionary<int, CholeskyFull>();
            for (int i = 0; i < 4; ++i) factorizedKrr[i] = Krr[i].FactorCholesky(false);

            // Access private fields of FetiDPSolver
            FieldInfo fi = typeof(FetiDPSolver).GetField("lagrangeEnumerator", BindingFlags.NonPublic | BindingFlags.Instance);
            var lagrangeEnumerator = (FetiDPLagrangeMultipliersEnumerator)(fi.GetValue(solver));
            fi = typeof(FetiDPSolver).GetField("dofSeparator", BindingFlags.NonPublic | BindingFlags.Instance);
            var dofSeparator = (FetiDPDofSeparator)(fi.GetValue(solver));

            // Create the flexibility matrices by multiplying with identity matrices
            int numLagranges = lagrangeEnumerator.NumLagrangeMultipliers;
            int numCornerDofs = dofSeparator.NumGlobalCornerDofs;
            var flexibility = new FetiDPFlexibilityMatrix(factorizedKrr, Krc, lagrangeEnumerator, dofSeparator);
            Matrix FIrr = MultiplyWithIdentity(numLagranges, numLagranges, flexibility.MultiplyFIrr);
            Matrix FIrc = MultiplyWithIdentity(numLagranges, numLagranges, (x, y) => y.CopyFrom(flexibility.MultiplyFIrc(x)));

            // Check against expected matrices
            var expectedFIrr = Matrix.CreateFromArray(new double[,]
            {
                {3.57057200993606, -0.108283270560292, 0.338429752179871, -0.279338843056072, -0.573961878785917, -0.114111168546807, 0, 0  },
                {-0.108283270560292, 2.65633088920628, -0.234165486478537, 0.447212600200740, -0.173283461887574, -0.573961878785916, 0, 0  },
                {0.338429752179871, -0.234165486478537, 2.26748388676785, -2.77555756156289e-17, 0, 0, -0.338429752179871, -0.23416548647853},
                {-0.279338843056072, 0.447212600200740, -2.77555756156289e-17, 3.03419905760385, 0, 0, -0.279338843056072, -0.44721260020073},
                {-0.573961878785917, -0.173283461887574, 0, 0, 2.71882869786337, -2.63677968348475e-16, 0.573961878785916, -0.17328346188757},
                {-0.114111168546807, -0.573961878785916, 0, 0, -2.63677968348475e-16, 4.04692914347278, -0.114111168546807, 0.57396187878591},
                {0, 0, -0.338429752179871, -0.279338843056072, 0.573961878785916, -0.114111168546807, 3.57057200993606, 0.108283270560292   },
                {0, 0, -0.234165486478537, -0.447212600200739, -0.173283461887574, 0.573961878785916, 0.108283270560292, 2.65633088920628   }
            });

            var expectedFIrc = Matrix.CreateFromArray(new double[,]
            {
                {0.244415273977447, 0.232902352320994, 0.188150279438879, -0.367471730456911, 0.325403750731022, 0.134569378056537, 0, 0                                           },
                {-0.127173102613820, 0.0205141879116909, 0.0345524284084688, 0.0581554138518863, 0.0926206740937292, 0.0806737768451912, 0, 0                                      },
                {-0.00592361806200106, 0.0896358681318229, -5.55111512312578e-17, 0.152076488272397, 0, 0, 0.00592361806200106, 0.0896358681318228                                 },
                {0.0980092297384746, -0.270103007383575, -0.136396263304725, 0, 0, 0, 0.0980092297384746, 0.270103007383575                                                        },
                {-0.0806737768451914, -0.0926206740937293, -2.22044604925031e-16, 0.0238937950679602, -1.66533453693773e-16, 0.161347553342741, 0.0806737768451914, -0.092620674093},
                {-0.134569378056537, -0.325403750731022, 0.515640037124902, 5.55111512312578e-17, -0.246501280853069, -2.22044604925031e-16, -0.134569378056537, 0.325403750731022 },
                {0, 0, 0.188150279438879, 0.367471730456911, 0.325403750731022, -0.134569378056537, 0.244415273977447, -0.232902352320994                                          },
                {0, 0, -0.0345524284084688, 0.0581554138518863, -0.0926206740937292, 0.0806737768451912, 0.127173102613820, 0.0205141879116910                                     }
            });

            double tol = 1E-11;
            Assert.True(expectedFIrr.Equals(FIrr, tol));
            Assert.True(expectedFIrc.Equals(FIrc, tol));
        }

        private static Matrix MultiplyWithIdentity(int numRows, int numCols, Action<Vector, Vector> matrixVectorMultiplication)
        {
            var result = Matrix.CreateZero(numRows, numCols);
            for (int j = 0; j < numCols; ++j)
            {
                var lhs = Vector.CreateZero(numCols);
                lhs[j] = 1.0;
                var rhs = Vector.CreateZero(numRows);
                matrixVectorMultiplication(lhs, rhs);
                result.SetSubcolumn(j, rhs);
            }
            return result;
        }
    }
}
